% Complete MATLAB Code with ACO Integration

% Parameters
dimX = 50;           % Width of the search space
dimY = 50;           % Height of the search space
numDrones = 5;       % Number of drones
numTimeSteps = 100;  % Number of simulation steps
xSpacing = 10;       % Spacing between drones along the x-axis

% ACO Parameters
alpha = 1;           % Influence of pheromone
beta = 2;            % Influence of heuristic information
evaporationRate = 0.1; % Pheromone evaporation rate
initialPheromone = 0.1; % Initial pheromone level
deltaPheromone = 1;  % Amount of pheromone deposited by drones

% Initialize the search space, pheromone map, heuristic map, and drones
searchSpace = createSearchSpace(dimX, dimY);
pheromoneMap = createPheromoneMap(dimX, dimY, initialPheromone);
[dronePositions, dronePaths] = initializeDrones(numDrones, dimX, dimY, xSpacing);

% Mark initial positions as discovered
searchSpace = updateDiscoveredArea(searchSpace, dronePositions);

% Simulation loop
for t = 1:numTimeSteps
    % Compute Voronoi partitioning
    voronoiMap = computeVoronoiMap(dronePositions, dimX, dimY);
    
    % Update heuristic map based on frontier cells
    heuristicMap = updateHeuristicMap(searchSpace, voronoiMap, numDrones);
    
    % Move drones using ACO
    [dronePositions, dronePaths, pheromoneMap] = moveDronesACO(dronePositions, searchSpace, voronoiMap, dronePaths, pheromoneMap, heuristicMap, alpha, beta, evaporationRate, deltaPheromone);
    
    % Update the discovered area based on drone positions
    searchSpace = updateDiscoveredArea(searchSpace, dronePositions);
    
    % Calculate total coverage
    totalCoverage = sum(searchSpace(:)) / numel(searchSpace) * 100;
    
    % Visualize the search space and drone positions
    visualizeSearchSpaceACO(searchSpace, dronePositions, voronoiMap, dronePaths, totalCoverage, dimX, dimY, pheromoneMap);
    pause(0.1); % Pause to control the speed of the simulation
end

% Final visualization without background colors
visualizeFinalPathsACO(dronePositions, dronePaths, dimX, dimY);

%% Function Definitions

function searchSpace = createSearchSpace(dimX, dimY)
% Creates the search space grid initialized as undiscovered (zeros)

    searchSpace = zeros(dimY, dimX);
end

function pheromoneMap = createPheromoneMap(dimX, dimY, initialPheromone)
% Initializes the pheromone map with the initial pheromone level

    pheromoneMap = ones(dimY, dimX) * initialPheromone;
end

function [dronePositions, dronePaths] = initializeDrones(numDrones, dimX, dimY, xSpacing)
% Initializes drone positions along the x-axis with specified spacing
% Outputs drone positions and initializes drone paths

    positions = zeros(numDrones, 2);
    paths = cell(numDrones,1);
    xPositions = linspace(1, dimX, numDrones * xSpacing);
    xIndices = round(linspace(1, length(xPositions), numDrones));

    for i = 1:numDrones
        xPos = xPositions(xIndices(i));
        positions(i, :) = [xPos, 1]; % Place drones along y = 1
        paths{i} = positions(i,:);   % Initialize path
    end

    % Ensure positions are integers within bounds
    positions = round(positions);
    positions(:,1) = max(min(positions(:,1), dimX), 1);
    positions(:,2) = max(min(positions(:,2), dimY), 1);
    dronePositions = positions;
    dronePaths = paths;
end

function searchSpace = updateDiscoveredArea(searchSpace, dronePositions)
% Updates the search space grid to mark discovered areas

    for i = 1:size(dronePositions, 1)
        x = dronePositions(i,1);
        y = dronePositions(i,2);
        searchSpace(y, x) = 1; % Mark the position as discovered
    end
end

function voronoiMap = computeVoronoiMap(dronePositions, dimX, dimY)
% Computes the Voronoi partitioning of the search space

    [X, Y] = meshgrid(1:dimX, 1:dimY); % X: columns, Y: rows
    numDrones = size(dronePositions, 1);
    voronoiMap = zeros(dimY, dimX);
    minDistances = inf(dimY, dimX);

    % Calculate distances from each cell to each drone
    for i = 1:numDrones
        dx = X - dronePositions(i,1);
        dy = Y - dronePositions(i,2);
        distances = dx.^2 + dy.^2; % Use squared Euclidean distance
        mask = distances < minDistances;
        voronoiMap(mask) = i;
        minDistances(mask) = distances(mask);
    end
end

function heuristicMap = updateHeuristicMap(searchSpace, voronoiMap, numDrones)
% Updates the heuristic map based on the number of undiscovered neighbors
% For each cell, heuristic value is proportional to the number of undiscovered neighbors

    [dimY, dimX] = size(searchSpace);
    heuristicMap = ones(dimY, dimX); % Initialize with ones to avoid zero heuristic
    for y = 1:dimY
        for x = 1:dimX
            if searchSpace(y,x) == 1 % Discovered cell
                % Check the 4-connected neighbors
                neighbors = [x+1,y; x-1,y; x,y+1; x,y-1];
                for k = 1:size(neighbors,1)
                    nx = neighbors(k,1);
                    ny = neighbors(k,2);
                    if nx >= 1 && nx <= dimX && ny >= 1 && ny <= dimY
                        if searchSpace(ny, nx) == 0
                            heuristicMap(ny, nx) = heuristicMap(ny, nx) + 1;
                        end
                    end
                end
            end
        end
    end
end

function [dronePositions, dronePaths, pheromoneMap] = moveDronesACO(dronePositions, searchSpace, voronoiMap, dronePaths, pheromoneMap, heuristicMap, alpha, beta, evaporationRate, deltaPheromone)
% Moves drones using Ant Colony Optimization principles

    numDrones = size(dronePositions, 1);
    [dimY, dimX] = size(searchSpace);

    % Evaporate pheromones
    pheromoneMap = (1 - evaporationRate) * pheromoneMap;
    pheromoneMap = max(pheromoneMap, 0.01); % Prevent pheromone levels from dropping to zero

    for i = 1:numDrones
        currentPos = dronePositions(i,:);

        % Generate possible moves (4-connected neighbors)
        possibleMoves = [
            currentPos(1)+1, currentPos(2);
            currentPos(1)-1, currentPos(2);
            currentPos(1), currentPos(2)+1;
            currentPos(1), currentPos(2)-1
        ];

        % Ensure moves are within bounds and within Voronoi region
        validMoves = [];
        for k = 1:size(possibleMoves,1)
            x = possibleMoves(k,1);
            y = possibleMoves(k,2);
            if x >=1 && x <= dimX && y >=1 && y <= dimY
                if voronoiMap(y, x) == i % Move is within drone's Voronoi region
                    validMoves = [validMoves; x, y];
                end
            end
        end

        if isempty(validMoves)
            % No valid moves, drone stays in place
            newPos = currentPos;
        else
            % Calculate transition probabilities
            probabilities = calculateTransitionProbabilities(validMoves, pheromoneMap, heuristicMap, alpha, beta);

            % Select next move based on probabilities
            newPos = selectNextMove(validMoves, probabilities);
        end

        % Update drone position and path
        dronePositions(i,:) = newPos;
        dronePaths{i} = [dronePaths{i}; newPos];

        % Update pheromone map
        x = newPos(1);
        y = newPos(2);
        pheromoneMap(y, x) = pheromoneMap(y, x) + deltaPheromone;
    end
end

function probabilities = calculateTransitionProbabilities(validMoves, pheromoneMap, heuristicMap, alpha, beta)
% Calculates the transition probabilities for the valid moves

    numMoves = size(validMoves, 1);
    probabilities = zeros(numMoves, 1);
    for k = 1:numMoves
        x = validMoves(k,1);
        y = validMoves(k,2);
        tau = pheromoneMap(y, x);
        eta = heuristicMap(y, x);
        probabilities(k) = (tau^alpha) * (eta^beta);
    end
    probabilities = probabilities / sum(probabilities);
end

function nextMove = selectNextMove(validMoves, probabilities)
% Selects the next move based on transition probabilities

    cumulativeProb = cumsum(probabilities);
    r = rand();
    index = find(cumulativeProb >= r, 1, 'first');
    nextMove = validMoves(index, :);
end

function visualizeSearchSpaceACO(searchSpace, dronePositions, voronoiMap, dronePaths, totalCoverage, dimX, dimY, pheromoneMap)
% Visualizes the search space, drone positions, and pheromone levels

    [dimY, dimX] = size(searchSpace);

    % Create a figure and clear it
    clf;
    axis equal tight;
    xlim([1, dimX]);
    ylim([1, dimY]);
    set(gca, 'YDir', 'normal'); % Correct the y-axis direction
    hold on;

    % Generate colors for drones
    numDrones = size(dronePositions,1);
    droneColors = lines(numDrones);

    % Plot pheromone levels as a heatmap
    imagesc(pheromoneMap);
    colormap('hot');
    colorbar;
    alpha(0.5);

    % Plot drone positions and paths
    for i = 1:numDrones
        % Plot drone path
        path = dronePaths{i};
        plot(path(:,1), path(:,2), '-', 'Color', droneColors(i,:), 'LineWidth', 1.5);

        % Plot drone position
        plot(dronePositions(i,1), dronePositions(i,2), 'ko', 'MarkerSize', 8, 'LineWidth', 2, 'MarkerFaceColor', 'w');
    end
    hold off;

    % Display total coverage
    title(sprintf('Total Coverage: %.2f%%', totalCoverage));
    drawnow;
end

function visualizeFinalPathsACO(dronePositions, dronePaths, dimX, dimY)
% Visualizes only the drones' paths and positions

    figure;
    axis equal;
    xlim([1, dimX]);
    ylim([1, dimY]);
    set(gca, 'YDir', 'normal'); % Correct the y-axis direction
    hold on;
    grid on;

    % Generate colors for drones
    numDrones = size(dronePositions,1);
    droneColors = lines(numDrones);

    % Plot drone positions and paths
    for i = 1:numDrones
        % Plot drone path
        path = dronePaths{i};
        plot(path(:,1), path(:,2), '-', 'Color', droneColors(i,:), 'LineWidth', 1.5);

        % Plot drone position
        plot(dronePositions(i,1), dronePositions(i,2), 'ko', 'MarkerSize', 8, 'LineWidth', 2, 'MarkerFaceColor', 'w');
    end
    hold off;
    title('Drone Paths');
end
